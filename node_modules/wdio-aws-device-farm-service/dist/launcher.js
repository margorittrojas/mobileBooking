"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const webdriverio_1 = require("webdriverio");
const devicefarm_1 = __importDefault(require("aws-sdk/clients/devicefarm"));
const logger_1 = __importDefault(require("@wdio/logger"));
const log = (0, logger_1.default)("@wdio/devicefarm-service");
class DeviceFarmLauncher {
    constructor(_options) {
        this._options = _options;
        this.devicefarm = new devicefarm_1.default({ region: "us-west-2" });
    }
    async onPrepare(_config, capabilities) {
        if (Array.isArray(capabilities)) {
            for (const cap of capabilities) {
                await this.setCapabilitySession(cap);
            }
        }
        else if (typeof capabilities === "object" && capabilities !== null) {
            for (const cap of Object.values(capabilities)) {
                await this.setCapabilitySession(cap);
            }
        }
    }
    async setCapabilitySession(capability) {
        const testGridUrlResult = await this.createSession();
        const url = new URL(testGridUrlResult.url);
        log.info("Created device farm test grid:", testGridUrlResult);
        Object.assign(capability, {
            protocol: "https",
            port: 443,
            hostname: url.hostname,
            path: url.pathname,
            connectionRetryTimeout: 180000,
        });
    }
    async createSession() {
        try {
            return await this.devicefarm
                .createTestGridUrl({
                projectArn: this._options.projectArn,
                expiresInSeconds: this._options.expiresInSeconds || 900,
            })
                .promise();
        }
        catch (err) {
            log.error(err);
            throw new webdriverio_1.SevereServiceError(err.message);
        }
    }
}
exports.default = DeviceFarmLauncher;
